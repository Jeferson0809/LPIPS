# -*- coding: utf-8 -*-
"""LPIPS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JApwJuIVwixIgSCG9OQd3O6jJ6Pe8xUq
"""

!git clone https://github.com/S-aiueo32/lpips-pytorch.git
!mv lpips-pytorch/lpips-pytorch <YOUR_PROJECT>

!pip install git+https://github.com/S-aiueo32/lpips-pytorch.git

import matplotlib.pyplot as plt
from pathlib import Path
import torchvision.transforms.functional as TF
from PIL import Image
from lpips_pytorch import LPIPS, lpips

# ðŸ”¹ Carga directa de la imagen (sin __file__)
img_path = Path("/content/gato.jpeg")
img = Image.open(img_path).convert("RGB")

img_path = Path("/content/gatodistorsionado.png")
img_x2 = Image.open(img_path).convert("RGB")


# ðŸ”¹ Convertir a tensores en [-1,1]
tensor_org = TF.to_tensor(img).unsqueeze(0) * 2 - 1
tensor_x2 = TF.to_tensor(img_x2).unsqueeze(0) * 2 - 1

print("Original:", tensor_org.shape, tensor_org.min().item(), tensor_org.max().item())
print("Degradada:", tensor_x2.shape, tensor_x2.min().item(), tensor_x2.max().item())




loss = lpips(tensor_org, tensor_x2, net_type='alex', version='0.1')

print("Distancia LPIPS:", loss.item())



# Mostrar imagen original y degradada lado a lado
plt.figure(figsize=(8,4))

plt.subplot(1,2,1)
plt.imshow(img)
plt.title("Original")
plt.axis("off")

plt.subplot(1,2,2)
plt.imshow(img_x2)
plt.title("Blurring")
plt.axis("off")

plt.show()